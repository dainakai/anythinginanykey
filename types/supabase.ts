// Placeholder for Supabase types generated by CLI
export type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[]

export type Database = {
  public: {
    Tables: {
      // Define your tables here based on schema.prisma
      Phrase: {
        Row: {
          id: string
          abcNotation: string
          originalKey: string
          comment: string | null
          isPublic: boolean
          starCount: number
          forkedFromId: string | null
          createdAt: string
          updatedAt: string
          userId: string // Supabase Auth user ID
        }
        Insert: {
          id?: string
          abcNotation: string
          originalKey: string
          comment?: string | null
          isPublic?: boolean
          starCount?: number
          forkedFromId?: string | null
          createdAt?: string
          updatedAt?: string
          userId: string // Supabase Auth user ID
        }
        Update: {
          id?: string
          abcNotation?: string
          originalKey?: string
          comment?: string | null
          isPublic?: boolean
          starCount?: number
          forkedFromId?: string | null
          createdAt?: string
          updatedAt?: string
          userId?: string // Supabase Auth user ID
        }
        Relationships: [
          {
            foreignKeyName: "Phrase_userId_fkey" // Assuming you named the foreign key like this implicitly
            columns: ["userId"]
            referencedRelation: "users" // Supabase auth table
            referencedColumns: ["id"]
          }
        ]
      }
      Tag: {
        Row: {
          id: string
          name: string
          type: string
          createdAt: string
          updatedAt: string
          userId: string | null // Supabase Auth user ID or null
        }
        Insert: {
          id?: string
          name: string
          type: string
          createdAt?: string
          updatedAt?: string
          userId?: string | null // Supabase Auth user ID or null
        }
        Update: {
          id?: string
          name?: string
          type?: string
          createdAt?: string
          updatedAt?: string
          userId?: string | null // Supabase Auth user ID or null
        }
        Relationships: []
      }
      Star: {
        Row: {
          userId: string // Supabase Auth user ID
          phraseId: string
          createdAt: string
        }
        Insert: {
          userId: string // Supabase Auth user ID
          phraseId: string
          createdAt?: string
        }
        Update: {
          userId?: string // Supabase Auth user ID
          phraseId?: string
          createdAt?: string
        }
        Relationships: [
          {
            foreignKeyName: "Star_phraseId_fkey"
            columns: ["phraseId"]
            referencedRelation: "Phrase"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "Star_userId_fkey"
            columns: ["userId"]
            referencedRelation: "users"
            referencedColumns: ["id"]
          }
        ]
      }
      Comment: {
        Row: {
          id: string
          content: string
          createdAt: string
          userId: string // Supabase Auth user ID
          phraseId: string
        }
        Insert: {
          id?: string
          content: string
          createdAt?: string
          userId: string // Supabase Auth user ID
          phraseId: string
        }
        Update: {
          id?: string
          content?: string
          createdAt?: string
          userId?: string // Supabase Auth user ID
          phraseId?: string
        }
        Relationships: [
          {
            foreignKeyName: "Comment_phraseId_fkey"
            columns: ["phraseId"]
            referencedRelation: "Phrase"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "Comment_userId_fkey"
            columns: ["userId"]
            referencedRelation: "users"
            referencedColumns: ["id"]
          }
        ]
      }
    }
    Views: { [_ in never]: never }
    Functions: { [_ in never]: never }
    Enums: { [_ in never]: never }
    CompositeTypes: { [_ in never]: never }
  }
}
