// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique // Make email optional for providers that don't guarantee it
  emailVerified DateTime? // Add emailVerified field
  image         String?   // Add image field
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  phrases       Phrase[]
  accounts      Account[] // Add relation to Account
  sessions      Session[] // Add relation to Session
  stars         Star[]    // Add relation to Star model
  comments      Comment[] // Add relation to Comment model
}

// Add Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Add Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Add VerificationToken model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Phrase {
  id           String   @id @default(cuid())
  abcNotation  String
  originalKey  String
  comment      String?
  isPublic     Boolean  @default(false)
  starCount    Int      @default(0)
  forkedFromId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  tags         Tag[]
  stars        Star[]
  comments     Comment[]
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  type      String   // "preset" or "user_defined"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  phrases   Phrase[]
}

// Add Star model
model Star {
  userId    String
  phraseId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  phrase Phrase @relation(fields: [phraseId], references: [id], onDelete: Cascade)

  @@id([userId, phraseId]) // Composite primary key
}

// Add Comment model
model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  phraseId  String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  phrase Phrase @relation(fields: [phraseId], references: [id], onDelete: Cascade)
}
